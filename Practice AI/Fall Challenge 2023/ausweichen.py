import sys,math,pygame,time,random

def distance(p1,p2):
    return int(round(math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) ),0))
    #return math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )

def setFischMove(list540):
    mList=[]
    for i in range(len(fischList)):
        p = random.randint(0,len(list540)-1)
        xP = random.randint(0,1); yP = random.randint(0,1)
        move = list540[p]
        if xP == 1:
            move[0] = move[0] * -1
        if yP == 1:
            move[1] = move[1] * -1
        mList.append(move)
    return mList

def setGrenzen(wert,g1,g2):
    if wert < g1:
        wert = g1
    if wert > g2:
        wert = g2
    return wert

def moveFisch(fischList,moveFischList,drone):
    for i in range(len(fischList)):
        fisch = fischList[i]
        d = distance(fisch,drone)
        if d <= 1400:
            print("drone jaggen!",file=sys.stderr)
            xU = (drone[0]-fisch[0])
            yU = (drone[1]-fisch[1])
            verhaeltnis= d/540
            xU = int(xU / verhaeltnis); yU = int(yU / verhaeltnis)
            fisch[0]=fisch[0]+xU;fisch[1]=fisch[1]+yU
        else:
            move = moveFischList[i]
            fisch[0] = fisch[0] + move[0]
            fisch[1] = fisch[1] + move[1]
            fisch[0] = setGrenzen(fisch[0],0,9999)
            fisch[1] = setGrenzen(fisch[1],2500,9999)

def fischDrone(fischList,drone):
    dList=[];problem=False
    for fisch in fischList:
        d = (distance([drone[0],drone[1]],[fisch[0],fisch[1]]))
        dList.append(d)
        if d <= 500:
            problem=True
    return dList,problem

def testeList600(drone,ziel,list600,fischList):
    ergList=[]
    for i in range(len(list600)):
        mov = list600[i]
        movList=[]
        movList.append(mov)
        movList.append([mov[0]*-1,mov[1]])
        movList.append([mov[0],mov[1]*-1])
        movList.append([mov[0]*-1,mov[1]*-1])
        for move in movList:
            moveXY = [drone[0]+move[0],drone[1]+move[1]]
            dList,problem = fischDrone(fischList,moveXY)
            if not problem:
                ergList.append(moveXY)
    return ergList

def setMove(drone,ziel,fischList,list600):
    newDrone=[]
    d = distance([drone[0],drone[1]],[ziel[0],ziel[1]])
    if d > 600:
        xU = (ziel[0]-drone[0])
        yU = (ziel[1]-drone[1])
        verhaeltnis= d/600
        xU = int(xU / verhaeltnis); yU = int(yU / verhaeltnis)
        #print(distance([0,0],[xU,yU]),file=sys.stderr)
        newDrone= [drone[0]+xU,drone[1]+yU]
    else:
        newDrone=ziel[:]
    dList,problem= fischDrone(fischList,newDrone)
    if problem:
        print("ausweichen!!!",file=sys.stderr)
        testList=testeList600(drone,ziel,list600,fischList)
        if len(testList) == 0:
            print("Mist")
        else:
            z1=[];d1=9999
            for test in testList:
                d = distance(test,ziel)
                if d < d1:
                    z1=test[:];d1=d
            print("bisher: {}   neu: {}".format(newDrone,z1),file=sys.stderr)
            newDrone=z1[:]

    return newDrone

#######################
list540=[[0, 540], [24, 539], [41, 538], [52, 537], [62, 536], [70, 535], [77, 534], [84, 533], [90, 532], [96, 531], [101, 530], [106, 529], [107, 529], [111, 528], [116, 527], [120, 526], [121, 526], [125, 525], [129, 524], [133, 523], [137, 522], [141, 521], [144, 520], [148, 519], [151, 518], [155, 517], [158, 516], [161, 515], [164, 514], [165, 514], [168, 513], [171, 512], [174, 511], [176, 510], [177, 510], [179, 509], [182, 508], [185, 507], [188, 506], [190, 505], [191, 505], [193, 504], [196, 503], [198, 502], [201, 501], [203, 500], [206, 499], [208, 498], [210, 497], [211, 497], [213, 496], [215, 495], [217, 494], [218, 494], [220, 493], [222, 492], [224, 491], [226, 490], [228, 489], [229, 489], [231, 488], [233, 487], [235, 486], [237, 485], [239, 484], [241, 483], [243, 482], [245, 481], [247, 480], [249, 479], [251, 478], [253, 477], [254, 476], [255, 476], [256, 475], [257, 475], [258, 474], [260, 473], [262, 472], [264, 471], [265, 470], [266, 470], [267, 469], [269, 468], [271, 467], [272, 466], [273, 466], [274, 465], [276, 464], [277, 463], [278, 463], [279, 462], [281, 461], [282, 460], [283, 460], [284, 459], [286, 458], [287, 457], [288, 457], [289, 456], [290, 455], [291, 455], [292, 454], [294, 453], [295, 452], [297, 451], [298, 450], [300, 449], [301, 448], [303, 447], [304, 446], [306, 445], [307, 444], [308, 443], [309, 443], [310, 442], [311, 441], [312, 441], [313, 440], [314, 439], [315, 438], [316, 438], [317, 437], [318, 436], [319, 436], [320, 435], [321, 434], [322, 433], [323, 433], [324, 432], [325, 431], [326, 430], [327, 430], [328, 429], [329, 428], [330, 427], [331, 427], [332, 426], [333, 425], [334, 424], [335, 423], [336, 423], [337, 422], [338, 421], [339, 420], [340, 419], [341, 419], [342, 418], [343, 417], [344, 416], [345, 415], [346, 414], [347, 414], [348, 413], [349, 412], [350, 411], [351, 410], [352, 409], [353, 408], [354, 408], [355, 407], [356, 406], [357, 405], [358, 404], [359, 403], [360, 402], [361, 401], [362, 401], [363, 400], [364, 399], [365, 398], [366, 397], [367, 396], [368, 395], [369, 394], [370, 393], [371, 392], [372, 391], [373, 390], [374, 389], [375, 388], [376, 387], [377, 386], [378, 385], [379, 384], [380, 383], [381, 382], [382, 381], [383, 380], [384, 379], [385, 378], [386, 377], [387, 376], [388, 375], [389, 374], [390, 373], [391, 372], [392, 371], [393, 370], [394, 369], [395, 368], [396, 367], [397, 366], [398, 365], [399, 364], [400, 363], [401, 361], [402, 360], [403, 359], [404, 358], [405, 357], [406, 356], [407, 355], [408, 353], [409, 352], [410, 351], [411, 350], [412, 349], [413, 348], [414, 346], [415, 345], [416, 344], [417, 343], [418, 342], [419, 340], [420, 339], [421, 338], [422, 337], [423, 335], [424, 334], [425, 333], [426, 332], [427, 330], [428, 329], [429, 328], [430, 326], [431, 325], [432, 324], [433, 322], [434, 321], [435, 320], [436, 318], [437, 317], [438, 315], [439, 314], [440, 313], [441, 311], [442, 310], [443, 308], [444, 307], [445, 306], [446, 304], [447, 303], [448, 301], [449, 300], [450, 298], [451, 297], [452, 295], [453, 294], [454, 292], [455, 290], [456, 289], [457, 287], [458, 286], [459, 284], [460, 282], [461, 281], [462, 279], [463, 277], [464, 276], [465, 274], [466, 272], [467, 271], [468, 269], [469, 267], [470, 265], [471, 264], [472, 262], [473, 260], [474, 258], [475, 256], [476, 254], [477, 253], [478, 251], [479, 249], [480, 247], [481, 245], [482, 243], [483, 241], [484, 239], [485, 237], [486, 235], [487, 233], [488, 231], [489, 228], [490, 226], [491, 224], [492, 222], [493, 220], [494, 217], [495, 215], [496, 213], [497, 210], [498, 208], [499, 206], [500, 203], [501, 201], [502, 198], [503, 196], [504, 193], [505, 190], [506, 188], [507, 185], [508, 182], [509, 179], [510, 176], [511, 174], [512, 171], [513, 168], [514, 164], [515, 161], [516, 158], [517, 155], [518, 151], [519, 148], [520, 144], [521, 141], [522, 137], [523, 133], [524, 129], [525, 125], [526, 120], [527, 116], [528, 111], [529, 106], [530, 101], [531, 96], [532, 90], [533, 84], [534, 77], [535, 70], [536, 62], [537, 52], [538, 41], [539, 24], [540, 0]]
#list600=[[0, 600], [25, 599], [43, 598], [55, 597], [65, 596], [74, 595], [82, 594], [89, 593], [95, 592], [101, 591], [107, 590], [112, 589], [117, 588], [122, 587], [127, 586], [132, 585], [136, 584], [140, 583], [144, 582], [148, 581], [152, 580], [156, 579], [160, 578], [163, 577], [167, 576], [170, 575], [173, 574], [174, 574], [177, 573], [180, 572], [183, 571], [186, 570], [189, 569], [192, 568], [195, 567], [198, 566], [201, 565], [204, 564], [206, 563], [207, 563], [209, 562], [212, 561], [215, 560], [217, 559], [220, 558], [222, 557], [225, 556], [227, 555], [230, 554], [232, 553], [234, 552], [235, 552], [237, 551], [239, 550], [241, 549], [242, 549], [244, 548], [246, 547], [248, 546], [250, 545], [252, 544], [253, 544], [255, 543], [257, 542], [259, 541], [261, 540], [263, 539], [265, 538], [267, 537], [269, 536], [271, 535], [273, 534], [275, 533], [277, 532], [279, 531], [281, 530], [283, 529], [284, 528], [285, 528], [286, 527], [287, 527], [288, 526], [290, 525], [292, 524], [294, 523], [295, 522], [296, 522], [297, 521], [299, 520], [301, 519], [302, 518], [303, 518], [304, 517], [306, 516], [307, 515], [308, 515], [309, 514], [311, 513], [312, 512], [313, 512], [314, 511], [316, 510], [317, 509], [318, 509], [319, 508], [320, 507], [321, 507], [322, 506], [324, 505], [325, 504], [327, 503], [328, 502], [329, 502], [330, 501], [331, 500], [332, 500], [333, 499], [334, 498], [335, 498], [336, 497], [337, 496], [338, 496], [339, 495], [340, 494], [342, 493], [343, 492], [344, 491], [345, 491], [346, 490], [347, 489], [348, 489], [349, 488], [350, 487], [352, 486], [353, 485], [354, 484], [355, 484], [356, 483], [357, 482], [358, 481], [359, 481], [360, 480], [361, 479], [362, 478], [363, 478], [364, 477], [365, 476], [366, 475], [367, 475], [368, 474], [369, 473], [370, 472], [371, 471], [372, 471], [373, 470], [374, 469], [375, 468], [376, 467], [377, 467], [378, 466], [379, 465], [380, 464], [381, 463], [382, 463], [383, 462], [384, 461], [385, 460], [386, 459], [387, 458], [388, 458], [389, 457], [390, 456], [391, 455], [392, 454], [393, 453], [394, 452], [395, 451], [396, 451], [397, 450], [398, 449], [399, 448], [400, 447], [401, 446], [402, 445], [403, 444], [404, 443], [405, 443], [406, 442], [407, 441], [408, 440], [409, 439], [410, 438], [411, 437], [412, 436], [413, 435], [414, 434], [415, 433], [416, 432], [417, 431], [418, 430], [419, 429], [420, 428], [421, 427], [422, 426], [423, 425], [424, 424], [425, 423], [426, 422], [427, 421], [428, 420], [429, 419], [430, 418], [431, 417], [432, 416], [433, 415], [434, 414], [435, 413], [436, 412], [437, 411], [438, 410], [439, 409], [440, 408], [441, 407], [442, 406], [443, 404], [444, 403], [445, 402], [446, 401], [447, 400], [448, 399], [449, 398], [450, 397], [451, 395], [452, 394], [453, 393], [454, 392], [455, 391], [456, 390], [457, 389], [458, 387], [459, 386], [460, 385], [461, 384], [462, 383], [463, 381], [464, 380], [465, 379], [466, 378], [467, 376], [468, 375], [469, 374], [470, 373], [471, 371], [472, 370], [473, 369], [474, 368], [475, 366], [476, 365], [477, 364], [478, 362], [479, 361], [480, 360], [481, 358], [482, 357], [483, 356], [484, 354], [485, 353], [486, 352], [487, 350], [488, 349], [489, 347], [490, 346], [491, 344], [492, 343], [493, 342], [494, 340], [495, 339], [496, 337], [497, 336], [498, 334], [499, 333], [500, 331], [501, 330], [502, 328], [503, 327], [504, 325], [505, 324], [506, 322], [507, 320], [508, 319], [509, 317], [510, 316], [511, 314], [512, 312], [513, 311], [514, 309], [515, 307], [516, 306], [517, 304], [518, 302], [519, 301], [520, 299], [521, 297], [522, 295], [523, 294], [524, 292], [525, 290], [526, 288], [527, 286], [528, 284], [529, 283], [530, 281], [531, 279], [532, 277], [533, 275], [534, 273], [535, 271], [536, 269], [537, 267], [538, 265], [539, 263], [540, 261], [541, 259], [542, 257], [543, 255], [544, 252], [545, 250], [546, 248], [547, 246], [548, 244], [549, 241], [550, 239], [551, 237], [552, 234], [553, 232], [554, 230], [555, 227], [556, 225], [557, 222], [558, 220], [559, 217], [560, 215], [561, 212], [562, 209], [563, 206], [564, 204], [565, 201], [566, 198], [567, 195], [568, 192], [569, 189], [570, 186], [571, 183], [572, 180], [573, 177], [574, 173], [575, 170], [576, 167], [577, 163], [578, 160], [579, 156], [580, 152], [581, 148], [582, 144], [583, 140], [584, 136], [585, 132], [586, 127], [587, 122], [588, 117], [589, 112], [590, 107], [591, 101], [592, 95], [593, 89], [594, 82], [595, 74], [596, 65], [597, 55], [598, 43], [599, 25], [600, 0]]
list600=[[0, 600], [43, 598], [65, 596], [95, 592], [122, 587],  [144, 582],  [163, 577],  [183, 571],  [204, 564],  
         [222, 557],  [241, 549],  [263, 539], [283, 529], [303, 518],
         [324, 505], [343, 492], [363, 478], [383, 462], [403, 444], [423, 425], [443, 404], [463, 381], [483, 356], 
         [503, 327], [523, 294], [543, 255], [563, 206], [583, 140], [600, 0]]



rahmen=[[0,0],[9999,9999]]
fisch=540;droneD=600
deepDict={0:[0,2499],1:[2500,5000],2:[5000,7500],3:[7500,9999]}
deathZone=500;detectedZone=800
zPos=0
startTime=time.time()

drone=[2000,0];ziel=[9999,9999];droneLast=[]
zielList=[[9600,9600],[400,9500],[1200,490]]
fischList=[[random.randint(100,300),random.randint(2600,9000)],[random.randint(400,700),random.randint(2600,9000)],[random.randint(800,1100),random.randint(2600,9000)],[random.randint(8900,9200),random.randint(2600,9000)],[random.randint(9300,9600),random.randint(2600,9000)],[random.randint(9700,9900),random.randint(2600,9000)]]
######
ziel=zielList.pop(0)
clock = pygame.time.Clock()
pygame.init()
SCREEN_WIDTH =999
SCREEN_HEIGHT = 999
screen = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])
running = True
fischSize=15
print(fischList,file=sys.stderr)
while running:
    screen.fill((255, 255, 255))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        #print(pygame.mouse.get_pos())
            
    droneLast=drone[:]
    moveFischList=setFischMove(list540)
    moveFisch(fischList,moveFischList,drone)    

    drone=setMove(drone,ziel,fischList,list600)

    pygame.draw.circle(screen, (150,250,150), (int(drone[0]/10), int(drone[1]/10)), fischSize)
    for fisch in fischList:
      # print("fisch: {} {}".format(int(fisch[0]/10),int(fisch[1]/10)),file=sys.stderr)         
       pygame.draw.circle(screen, (0,0,150), (int(fisch[0]/10), int(fisch[1]/10)), fischSize)
       d = distance([drone[0],drone[1]],[fisch[0],fisch[1]])
       if d <= 500:
           print("Drone gefangen! {}  {}  {} {}".format(drone,fisch,d,droneLast));running=False

    if drone == ziel:
        print("Ziel erreicht!")
        if len(zielList) == 0:
            running=False
        else:
            ziel=zielList.pop(0)
        time.sleep(1)

    pygame.display.flip()
    clock.tick(5)   # xx fps (frames per second)
print("Laufzeit={}".format(time.time()-startTime),file=sys.stderr)
time.sleep(2)
pygame.quit()
# 600 fix:   [[0, 600], [168, 576], [360, 480], [480, 360], [576, 168], [600, 0]]