#  https://www.codingame.com/ide/puzzle/16x16-sudoku

import sys,math

size=16
prSet=set()
prSet.add('0');prSet.add('1');prSet.add('2');prSet.add('3');prSet.add('4');prSet.add('5');prSet.add('6');prSet.add('7');prSet.add('8');prSet.add('9')
prSet.add('10');prSet.add('11');prSet.add('12');prSet.add('13');prSet.add('14');prSet.add('15');prSet.add('16')
#print(prSet)


#board = [list(input()) for x in range(9)]
#board=[['1', '2', '0', '0', '7', '0', '5', '6', '0'], ['5', '0', '7', '9', '3', '2', '0', '8', '0'], ['0', '0', '0', '0', '0', '1', '0', '0', '0'], ['0', '1', '0', '2', '4', '0', '0', '5', '0'], ['3', '0', '8', '0', '0', '0', '4', '0', '2'], ['0', '7', '0', '0', '8', '5', '0', '1', '0'], ['0', '0', '0', '7', '0', '0', '0', '0', '0'], ['0', '8', '0', '4', '2', '3', '7', '0', '1'], ['0', '3', '4', '0', '1', '0', '0', '2', '8']]
board=[]

#1
rowList=[['.', 'L', 'E', 'K', '.', 'G', '.', '.', '.', '.', '.', 'N', 'O', '.', 'C', '.'], ['.', '.', 'M', '.', 'H', '.', 'J', 'O', 'B', 'D', 'G', '.', 'F', 'E', 'N', 'K'], ['J', '.', '.', 'C', '.', 'B', 'A', 'N', '.', 'E', 'K', '.', '.', '.', '.', 'I'], ['.', 'B', 'G', '.', '.', 'K', '.', '.', 'C', '.', 'J', '.', '.', 'D', 'P', 'M'], ['.', 'H', 'A', '.', 'F', 'L', '.', '.', 'K', '.', '.', 'M', '.', 'P', '.', '.'], ['.', '.', '.', 'O', 'A', '.', '.', '.', '.', '.', 'D', '.', 'I', 'K', '.', 'G'], ['.', '.', 'K', 'D', 'J', '.', 'C', 'B', 'F', 'A', 'I', 'G', '.', 'M', 'H', 'L'], ['.', 'M', '.', '.', '.', '.', '.', 'E', 'P', 'J', 'N', 'O', '.', 'A', '.', '.'], ['G', '.', '.', '.', 'I', 'A', '.', 'D', 'E', '.', 'C', 'J', 'P', '.', '.', '.'], ['A', 'K', '.', '.', '.', '.', 'G', 'H', 'N', 'M', '.', '.', 'L', 'I', 'J', '.'], ['.', '.', 'D', 'J', 'O', 'N', '.', '.', 'G', 'L', '.', 'B', 'K', 'H', '.', 'F'], ['.', 'N', '.', '.', '.', 'J', '.', 'K', '.', 'F', '.', '.', '.', 'G', 'A', 'B'], ['D', '.', '.', 'A', '.', '.', 'F', 'J', '.', '.', 'L', 'I', 'M', '.', 'K', '.'], ['E', '.', 'L', 'F', 'C', 'D', 'B', '.', 'O', '.', 'M', '.', 'N', '.', 'I', '.'], ['.', 'J', 'I', '.', '.', '.', '.', 'P', 'D', '.', '.', '.', '.', '.', 'L', '.'], ['.', '.', '.', '.', '.', 'H', '.', 'I', 'J', '.', '.', '.', '.', 'C', 'B', 'A']]
#2
rowList=[['.', 'E', 'D', 'K', '.', 'H', '.', '.', 'L', '.', 'I', 'G', 'B', 'A', '.', '.'], ['.', 'I', '.', 'G', '.', 'A', 'K', 'N', '.', '.', '.', '.', '.', 'D', '.', 'P'], ['.', '.', 'O', '.', 'I', 'E', '.', 'P', 'B', 'A', '.', 'N', '.', 'G', '.', '.'], ['P', 'N', 'A', 'B', 'G', '.', 'O', 'D', 'E', '.', '.', '.', '.', '.', 'I', 'J'], ['I', 'F', 'L', '.', 'H', 'G', '.', '.', 'J', '.', 'A', '.', 'O', '.', 'D', 'N'], ['D', '.', '.', '.', 'C', '.', '.', '.', '.', 'M', '.', '.', 'E', '.', '.', 'F'], ['B', 'O', 'E', 'N', 'J', 'I', 'L', '.', 'K', 'D', '.', 'P', '.', '.', '.', '.'], ['H', 'J', 'K', '.', '.', 'B', 'A', '.', '.', '.', '.', '.', '.', '.', '.', 'L'], ['.', '.', 'C', '.', '.', 'F', '.', 'B', '.', 'K', 'J', '.', 'L', 'P', '.', 'M'], ['J', '.', '.', '.', '.', '.', 'D', 'C', '.', '.', 'P', '.', 'I', 'N', 'K', 'G'], ['.', 'L', '.', '.', '.', 'P', '.', 'K', '.', '.', 'C', 'A', 'J', 'H', '.', '.'], ['N', '.', '.', 'O', 'L', '.', 'J', 'I', '.', '.', '.', 'F', '.', 'E', '.', 'C'], ['.', 'C', 'B', 'I', 'M', 'D', '.', 'G', '.', 'J', '.', 'K', '.', 'L', '.', '.'], ['.', 'D', 'F', 'E', 'P', '.', '.', 'L', 'A', '.', 'M', '.', 'K', 'O', '.', '.'], ['.', 'M', '.', 'H', '.', '.', '.', 'A', 'C', 'I', 'L', '.', 'P', 'F', '.', 'D'], ['.', 'P', 'N', 'L', 'O', 'J', '.', 'H', 'G', '.', 'E', '.', '.', 'B', '.', '.']]
#3
#rowList=[['.', '.', '.', '.', '.', '.', '.', '.', 'B', '.', 'H', 'A', 'L', '.', '.', 'N'], ['.', '.', 'N', '.', '.', '.', '.', '.', 'D', '.', '.', '.', 'O', 'E', 'F', '.'], ['.', '.', 'K', '.', 'A', '.', '.', 'J', '.', '.', 'N', 'O', '.', 'B', '.', 'P'], ['.', '.', '.', 'C', 'L', '.', 'D', '.', '.', 'G', '.', 'E', '.', 'M', '.', 'J'], ['.', '.', '.', 'J', 'H', '.', '.', 'P', '.', '.', '.', '.', '.', '.', '.', 'E'], ['.', 'N', '.', 'K', '.', '.', '.', '.', '.', 'I', '.', '.', 'J', 'G', 'O', 'D'], ['.', 'O', 'M', '.', '.', 'I', 'E', 'C', 'N', 'B', '.', 'G', 'H', '.', '.', '.'], ['H', 'B', '.', '.', '.', 'D', '.', '.', 'P', '.', 'J', '.', 'N', 'F', 'C', 'I'], ['.', 'H', 'A', '.', 'M', 'E', '.', '.', '.', '.', '.', '.', 'K', 'N', '.', 'C'], ['D', '.', '.', 'E', 'N', 'B', '.', 'H', '.', 'P', 'O', 'L', '.', '.', '.', '.'], ['N', 'M', '.', 'B', '.', '.', 'O', '.', 'J', 'K', '.', '.', 'D', '.', '.', '.'], ['.', 'P', 'L', '.', '.', '.', '.', 'D', '.', '.', '.', '.', '.', 'A', '.', 'O'], ['.', 'E', '.', 'H', 'D', 'C', '.', '.', '.', '.', '.', 'F', 'P', 'K', '.', '.'], ['.', 'C', '.', '.', 'E', 'A', 'N', '.', 'O', 'L', '.', 'P', '.', 'I', '.', '.'], ['I', 'A', '.', 'N', 'G', '.', 'P', 'M', '.', '.', 'K', 'D', '.', '.', 'E', '.'], ['.', '.', 'O', '.', 'I', 'H', '.', '.', '.', '.', '.', 'N', 'A', 'C', '.', '.']]
#6
#rowList=[['.', 'C', '.', '.', '.', '.', '.', '.', 'E', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', 'J', '.', '.', 'A', '.', 'B', 'F', 'P', '.', '.', '.', 'K', 'L', 'D'], ['.', '.', 'I', '.', 'D', '.', 'N', 'J', '.', 'A', '.', '.', 'E', 'B', '.', 'G'], ['L', '.', '.', 'A', '.', '.', '.', '.', 'J', '.', '.', 'N', '.', '.', '.', 'O'], ['D', 'H', '.', 'M', 'B', 'J', 'C', 'P', '.', '.', 'F', '.', '.', 'I', 'K', 'A'], ['.', '.', '.', 'L', '.', 'N', 'M', '.', '.', 'O', 'D', '.', '.', '.', '.', 'C'], ['.', '.', 'N', '.', 'I', '.', '.', '.', '.', '.', '.', '.', '.', 'G', '.', '.'], ['B', '.', '.', 'F', '.', '.', 'O', 'G', 'I', 'C', 'P', '.', '.', 'L', 'D', 'M'], ['.', 'G', '.', 'E', '.', '.', '.', 'D', '.', '.', '.', 'I', 'M', '.', 'O', 'K'], ['.', 'A', '.', '.', 'G', '.', 'P', '.', '.', '.', '.', 'F', 'L', 'H', 'C', 'N'], ['.', 'F', '.', '.', '.', '.', 'H', 'O', 'M', '.', 'B', '.', 'G', '.', 'E', '.'], ['M', 'O', 'P', '.', '.', '.', '.', '.', '.', 'G', '.', '.', '.', '.', 'A', '.'], ['.', '.', 'M', 'I', '.', 'B', '.', 'F', '.', 'H', 'O', 'E', 'K', '.', 'G', '.'], ['.', 'B', '.', 'D', 'C', '.', 'E', '.', 'N', '.', 'L', '.', '.', 'F', 'M', '.'], ['G', '.', '.', '.', '.', '.', '.', 'N', 'C', '.', '.', 'P', '.', 'A', '.', 'E'], ['.', 'E', 'F', 'H', '.', '.', '.', 'I', '.', '.', 'G', '.', '.', '.', 'N', '.']]

abcList=['.','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P']
numList=['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16']
abcDict={};numDict={}
for i in range(17):
    abcDict[abcList[i]] = numList[i];numDict[numList[i]] = abcList[i]

for row in rowList:
    line=[]
    for r in row:
        line.append(abcDict[r])
    board.append(line[:])

moves = []
#[  [[x,y],[TRIED NUMBERS]]  ]


def findSolY(col):
    erg= set([board[y][col]for y in range(size)])^prSet
    return erg

def findSolX(row):
    erg= set(board[row])^prSet
    return erg

def findSolBox(px,py):
    xStart = px//4*4
    yStart = py//4*4
    square = []
   
    square+=board[yStart][xStart:xStart+4]
    square+=board[yStart+1][xStart:xStart+4]
    square+=board[yStart+2][xStart:xStart+4]
    square+=board[yStart+3][xStart:xStart+4]
    #print(square)
    return set(square)^prSet

def pointSol(x,y,tried):
    return list((findSolBox(x,y)&findSolX(y)&findSolY(x))-set(tried))

def getEmpty():
    for y in range(size):
        if "0" in board[y]:return [board[y].index("0"),y]
    return [-1,-1]

def printBoard():
    ergList=[]
    for row in board:
        line=[]
        for r in row:
            line.append(numDict[r])
        ergList.append(line)

    for erg in ergList:
        for e in erg:
            print(e,end="")
        print("")



def solve():
    done=False
    while not done:
        x,y=moves[-1][0]
        ps=sorted(pointSol(x,y,moves[-1][1]))
        
        if ps:
            moves[-1][1]+=[ps[0]]
            board[y][x]=ps[0]
            p=getEmpty()
            if p[0]==-1:done = True
            moves.append([p,[]])
            #print(x,y,ps)
            #printBoard()
            #print(" ")
        else:
            board[y][x]="0"
            moves.pop()
            #print(x,y,"BACKTRACK")
            #print(moves)
            #break


#printBoard()
moves.append([getEmpty(),[]])
solve()
printBoard()