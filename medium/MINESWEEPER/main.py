import sys
import math

moveList = [[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0]]
def searchMine(i,j,cellList,mineList,freiList):
    xM,yM=-1,-1
    anzahlF=0;listF=[]
    for move in moveList:
        xN=i+move[0];yN=j+move[1]
        if xN >= 0 and xN < 16 and yN >= 0 and yN < 30 and cellList[xN][yN] =='?':
            anzahlF+=1;listF.append([xN,yN])
        elif [xN,yN] in mineList:
            anzahlF+=1
        
    if anzahlF == int(cellList[i][j]):
        for feld in listF:
            xM=feld[0];yM=feld[1]
            if not feld in mineList:
                mineList.append(feld)
    return xM,yM

def searchFrei(i,j,cellList,mineList,freiList,freiWahr):
    anzahlM=0;listF=[]
    for move in moveList:
        xN=i+move[0];yN=j+move[1]
        if xN >= 0 and xN < 16 and yN >= 0 and yN < 30 and cellList[xN][yN] =='?':
            if [xN,yN] in mineList:
                anzahlM += 1
            else:
                listF.append([xN,yN])
    if anzahlM == int(cellList[i][j]):
        for feld in listF:
            xM=feld[0];yM=feld[1]
            if not feld in freiList:
                freiList.append(feld)
    else:
        if (len(listF) - anzahlM) / (int(cellList[i][j]) - anzahlM) > 2:
            freiWahr[str(i)+"-"+str(j)] = (len(listF) - anzahlM) / (int(cellList[i][j]) - anzahlM)

def searchLeer(i,j,cellList,mineList,freiList,freiWerte):
    anzahlF = 0
    for move in moveList:
        xN=i+move[0];yN=j+move[1]
        if xN >= 0 and xN < 16 and yN >= 0 and yN < 30 and cellList[xN][yN] =='?':
            anzahlF+=1
    if anzahlF > 0:
        freiWerte[str(i)+"-"+str(j)] = anzahlF  


def search(cellList,mineList,freiList,runde,freiWahr):
    x,y,xM,yM =7,7,-1,-1
    for i in range(len(cellList)):
        for j in range(len(cellList[0])):
            if cellList[i][j] in ['1','2','3','4','5','6','7','8']:
                xM,yM = searchMine(i,j,cellList,mineList,freiList)
    for i in range(len(cellList)):
        for j in range(len(cellList[0])):
            if cellList[i][j] in ['1','2','3','4','5','6','7','8']:            
                searchFrei(i,j,cellList,mineList,freiList,freiWahr)

    if len(freiList) == 0 and runde > 0 and len(freiWahr) > 0:
       # print(freiWahr,file=sys.stderr)
        for frei in sorted(freiWahr, key=freiWahr.get, reverse=True):
            a,b=frei.split("-")
            freiWerte={}
            for move in moveList:
                xN=int(a)+move[0];yN=int(b)+move[1]
                if xN >= 0 and xN < 16 and yN >= 0 and yN < 30 and cellList[xN][yN] =='?' and not [xN,yN] in mineList:
                    searchLeer(xN,yN,cellList,mineList,freiList,freiWerte)
            break
        print(freiWerte,file=sys.stderr)
        for frei in sorted(freiWerte, key=freiWerte.get, reverse=True):
            a,b=frei.split("-")
            freiList.append([a,b])
    print(freiList,file=sys.stderr)

    if len(freiList) == 0 and runde > 0:
        freiWerte={}
        for i in range(len(cellList)):
            for j in range(len(cellList[0])):
                if cellList[i][j] == "?" and not [i,j] in mineList:
                    searchLeer(i,j,cellList,mineList,freiList,freiWerte)
        for frei in sorted(freiWerte, key=freiWerte.get, reverse=True):
            a,b=frei.split("-")
            freiList.append([a,b])

    return x,y,xM,yM

runde = -1;runde=2
cellList=[]
mineList = [];gesetztList=[];freiList=[];freiWahr={}
while True:
    cellList.clear();freiList.clear();freiWahr.clear()
    runde += 1
 #   for i in range(16):
 #       cellList.append(list(input().split()))
            # cell: '?' if unknown, '.' if no mines nearby, '1'-'8' otherwise
  # for line in cellList:
  #     print(line,file=sys.stderr)

    cellList = [['.', '1', '?', '2', '1', '1', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '1', '1', '3', '?', '2', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '.', '1', '4', '?', '4', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '.', '1', '?', '?', '?', '3', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '.', '1', '2', '5', '?', '3', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['1', '1', '.', '1', '4', '?', '4', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '1', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['1', '1', '.', '1', '3', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '.', '.', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['1', '1', '.', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '1', '1', '2', '?', '3', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['1', '1', '1', '?', '3', '4', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '.', '2', '4', '?', '3', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '1', '?', '4', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['.', '1', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?']]
    cellList
    cellList = [['?', '?', '1', '.', '.', '.', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '?', '1', '.', '.', '1', '2', '3', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '?', '2', '1', '.', '1', '?', '?', '3', '2', '3', '4', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '2', '?', '1', '.', '1', '2', '2', '2', '?', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '3', '1', '1', '1', '1', '2', '1', '2', '1', '2', '2', '4', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '1', '.', '1', '3', '?', '3', '?', '1', '.', '.', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '2', '2', '3', '?', '?', '3', '1', '1', '.', '.', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '2', '?', '?', '3', '2', '1', '.', '.', '.', '.', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '2', '?', '3', '1', '.', '.', '.', '.', '.', '.', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['1', '3', '?', '2', '.', '.', '.', '.', '.', '.', '.', '2', '3', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '?', '?', '1', '.', '.', '.', '.', '.', '.', '1', '3', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '?', '?', '2', '1', '.', '.', '.', '.', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '2', '4', '?', '2', '.', '.', '.', '.', '1', '?', '4', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '?', '3', '?', '2', '.', '.', '.', '.', '1', '1', '2', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '2', '2', '2', '2', '1', '.', '.', '1', '1', '1', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?'], ['?', '1', '.', '1', '?', '1', '.', '.', '1', '?', '1', '1', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?', '?']]


    x,y,xM,yM=search(cellList,mineList,freiList,runde,freiWahr)

    for feld in mineList:
        if not feld in gesetztList:
            xM=feld[0];yM=feld[1];break
    if len(freiList) > 0:
        feld = freiList[0]
        x=feld[0];y=feld[1]

    if xM == -1:
        print(str(y)+" "+str(x))
    else:
        print(str(y)+ " "+ str(x) + " " + str(yM) + " " + str(xM))
        gesetztList.append([xM,yM])
    #print(mineList,file=sys.stderr)
    if runde >= 1:
        break